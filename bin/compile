#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# config
SCONS_VERSION="1.2.0"
S3_BUCKET="heroku-buildpack-nodejs"
CUSTOM_ADDR="http://<addressToYourOracleClientTarballDirectory/"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
if [ -z "$BUILDPACK_CACHE" ]; then BUILDPACK_CACHE="/tmp"; fi
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd $BUILD_DIR
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NPM/cli.js $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function manifest_versions() {
  if [ -f "${BUILDPACK_CACHE}/manifest.${1}" ]; then
     cat "${BUILDPACK_CACHE}/manifest.${1}" | tr -s '\n' ' '
  else
    if [ $# -eq 2 ];then
      curl "${CUSTOM_ADDR}/manifest.${1}" -s -o - | tr -s '\n' ' '
    else
      curl "http://${S3_BUCKET}.s3.amazonaws.com/manifest.${1}" -s -o - | tr -s '\n' ' '
    fi
  fi
}

function resolve_version() {
  available_versions="$1"
  requested_version="$2"
  default_version="$3"

  args=""
  for version in $available_versions; do args="${args} -v \"${version}\""; done

  if [ "$2" == "" ]; then
    args="${args} -r \"${default_version}\"";
  else
    args="${args} -r \"${requested_version}\"";
  fi

  evaluated_versions=$(eval $bootstrap_node/bin/node $LP_DIR/vendor/node-semver/bin/semver ${args} || echo "")
  echo "$evaluated_versions" | tail -n 1
}

function package_engine_version() {
   
  version=$(cat $BUILD_DIR/package.json | $bootstrap_node/bin/node $LP_DIR/vendor/json/json engines.$1 2>/dev/null)
  if [ $? == 0 ]; then
    echo $version | sed -e 's/\([<>=]\) /\1/g'
  fi
}

function package_resolve_version() {
  engine="$1"
  resolved_version=$(resolve_version "${engine_versions[$engine]}" "${engine_requests[$engine]}" "${engine_defaults[$engine]}")

  if [ "${resolved_version}" == "" ]; then
    error "Requested engine $engine version ${engine_requests[$engine]} does not match available versions: ${engine_versions[$engine]}"
  else
    echo $resolved_version
  fi
}

function package_fetch_from_cache() {
  filename=$1
  destination=$2

  source="${BUILDPACK_CACHE}/$filename"
  if [ ! -f $source ]; then
    echo 1
  else
    cp $source $destination
    echo 0
  fi
}

function package_fetch_from_curl() {
  filename=$1
  destination=$2
  remoteLocation=$3

  if [ $# -eq 3 ];then
        package="$remoteLocation/$filename"
  else
        package="http://${S3_BUCKET}.s3.amazonaws.com/$filename"
  fi

  echo "------> PACKAGE TO DOWNLOAD: $package"
  curl $package -s -o $destination/$filename
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"
  customLocation="$4"

  mkdir -p $location
  package_name="$engine-$version.tgz"
  destination="."

  status=$(package_fetch_from_cache $package_name $destination)
  if [ $status != 0 ]; then
    package_fetch_from_curl $package_name $destination $customLocation
  fi
  tar xzf $package_name -C $location
}


bootstrap_node=$(mktmpdir bootstrap_node)
package_download "nodejs" "0.4.7" $bootstrap_node

# make some associative arrays
declare -A engine_versions
declare -A engine_defaults
declare -A engine_requests

engine_defaults["node"]="0.10.x"
engine_defaults["npm"]="1.2.x"
engine_defaults["oracle_client"]="11.2.0"

engine_versions["node"]=$(manifest_versions "nodejs")
engine_requests["node"]=$(package_engine_version "node")

engine_versions["npm"]=$(manifest_versions "npm")
engine_requests["npm"]=$(package_engine_version "npm")

engine_versions["oracle_client"]=$(manifest_versions "oracle_client" "custom")
engine_requests["oracle_client"]=$(package_engine_version "oracle_client")

echo "-----> Running Custom Oracle Buildpack"
echo "-----> Resolving engine versions"

# add a warning if no version of node specified
if [ "${engine_requests["node"]}" == "" ]; then
  echo
  echo "WARNING: No version of Node.js specified in package.json, see:" | indent
  echo "https://devcenter.heroku.com/articles/nodejs-versions" | indent
  echo
fi

NODE_VERSION=$(package_resolve_version "node")
echo "Using Node.js version: ${NODE_VERSION}" | indent

NPM_VERSION=$(package_resolve_version "npm")
echo "Using npm version: ${NPM_VERSION}" | indent

ORACLE_CLIENT_VERSION=$(package_resolve_version "oracle_client")
echo "Using oracle client version: ${ORACLE_CLIENT_VERSION}" | indent

# cache directories
CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NODE_VERSION/$NPM_VERSION"
CACHE_TARGET_DIR="$BUILD_DIR/node_modules"


# s3 packages
NODE_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/nodejs-${NODE_VERSION}.tgz"
NPM_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/npm-${NPM_VERSION}.tgz"
SCONS_PACKAGE="http://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}.tgz"

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_NPM="$(mktmpdir npm)"
VENDORED_SCONS="$(mktmpdir scons)"
VENDORED_ORACLE_CLIENT="$(mktmpdir oracle_client)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "nodejs" "${NODE_VERSION}" "${VENDORED_NODE}"
package_download "npm" "${NPM_VERSION}" "${VENDORED_NPM}"
package_download "scons" "${SCONS_VERSION}" "${VENDORED_SCONS}"
package_download "oracle_client" "${ORACLE_CLIENT_VERSION}" "${VENDORED_ORACLE_CLIENT}" "${CUSTOM_ADDR}"

############ ORACLE ADDED SECTION #######################
export OCI_INCLUDE_DIR=$PWD/instantclient/sdk/include/
export OCI_LIB_DIR=$PWD/instantclient/
export LD_LIBRARY_PATH=$PWD/instantclient/

echo "----> Unpackaging Oracle client"
tar zxf ./oracle_client-${ORACLE_CLIENT_VERSION}.tgz
echo "----> Removing oracle compressed package"
rm ./oracle_client-${ORACLE_CLIENT_VERSION}.tgz
echo "----> Adding symbolic links for oracle libraries"

mv instantclient* instantclient
cd instantclient
ln -s libocci.so.11.1 libocci.so
ln -s libclntsh.so.11.1 libclntsh.so
echo "----> Oracle Client setup complete"

############ END ORACLE ADDED SECTION #######################

# vendor node into the slug
PATH="$BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$BUILD_DIR/bin/node"

# setting up paths for building
PATH="$VENDORED_SCONS:$VENDORED_NODE/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"

# install dependencies with npm
echo "-----> Installing dependencies with npm"
run_npm "install --production"
run_npm "rebuild"
echo "Dependencies installed" | indent

echo "-----> Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\"\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\"" > $BUILD_DIR/.profile.d/nodejs.sh

############ ORACLE ADDED ENVIRONMENT VARIABLES #######################
echo "-----> Adding ORACLE environment variables"
echo "export OCI_INCLUDE_DIR=\"\$PWD/instantclient/sdk/include/\"" >> $BUILD_DIR/.profile.d/nodejs.sh
echo "export OCI_LIB_DIR=\"\$PWD/instantclient/\"" >> $BUILD_DIR/.profile.d/nodejs.sh
echo "export LD_LIBRARY_PATH=\"\$PWD/instantclient/\"" >> $BUILD_DIR/.profile.d/nodejs.sh
echo "-----> NodeJS Oracle Compile script complete"
############ END ORACLE ADDED ENVIRONMENT VARIABLES #######################
